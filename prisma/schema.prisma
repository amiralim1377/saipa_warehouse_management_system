generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model aisles {
  id              String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  zone_id         String            @db.Uuid
  name            String            @db.VarChar(100)
  created_at      DateTime?         @default(now()) @db.Timestamp(6)
  zones           zones             @relation(fields: [zone_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  parts_inventory parts_inventory[]
  racks           racks[]
}

model categories {
  id              String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name            String            @db.VarChar(100)
  description     String?
  created_at      DateTime?         @default(now()) @db.Timestamp(6)
  updated_at      DateTime?         @default(now()) @db.Timestamp(6)
  parts_inventory parts_inventory[]
  subcategories   subcategories[]
}

model customers {
  id                          String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  customer_type               String
  first_name                  String?
  last_name                   String?
  national_id                 String?
  company_name                String?
  company_registration_number String?
  phone                       String
  email                       String?
  province                    String?
  city                        String?
  address                     String?
  postal_code                 String?
  notes                       String?
  created_at                  DateTime?      @default(now()) @db.Timestamptz(6)
  sales_orders                sales_orders[]
}

model locations {
  id              String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  warehouse_id    String           @db.Uuid
  zone            Int
  aisle           Int
  rack            Int
  level           Int
  is_occupied     Boolean?         @default(false)
  current_part_id String?          @db.Uuid
  created_at      DateTime?        @default(now()) @db.Timestamp(6)
  parts_inventory parts_inventory? @relation(fields: [current_part_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  warehouses      warehouses       @relation(fields: [warehouse_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model parts_inventory {
  id             String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  part_code      String           @db.VarChar(100)
  part_name      String           @db.VarChar(255)
  category_id    String           @db.Uuid
  subcategory_id String           @db.Uuid
  warehouse_id   String           @db.Uuid
  zone_id        String           @db.Uuid
  aisle_id       String           @db.Uuid
  rack_id        String           @db.Uuid
  shelf_id       String           @db.Uuid
  supplier_id    String           @db.Uuid
  unit           String           @db.VarChar(50)
  stock          Int
  unit_price     Decimal          @db.Decimal(12, 2)
  location       String?          @db.VarChar(255)
  inbound_type   String           @db.VarChar(50)
  entry_date     DateTime         @default(now()) @db.Timestamptz(6)
  description    String?
  status         String           @default("available") @db.VarChar(50)
  batch_number   String?          @db.VarChar(100)
  min_stock      Int?             @default(0)
  is_deleted     Boolean?         @default(false)
  created_at     DateTime?        @default(now()) @db.Timestamptz(6)
  updated_at     DateTime?        @default(now()) @db.Timestamptz(6)
  total_value    Decimal?         @db.Decimal
  locations      locations[]
  aisles         aisles           @relation(fields: [aisle_id], references: [id])
  categories     categories       @relation(fields: [category_id], references: [id])
  racks          racks            @relation(fields: [rack_id], references: [id])
  shelves        shelves          @relation(fields: [shelf_id], references: [id])
  subcategories  subcategories    @relation(fields: [subcategory_id], references: [id])
  suppliers      suppliers        @relation(fields: [supplier_id], references: [id])
  warehouses     warehouses       @relation(fields: [warehouse_id], references: [id])
  zones          zones            @relation(fields: [zone_id], references: [id])
  parts_outbound parts_outbound[]

  @@index([warehouse_id, zone_id, aisle_id, rack_id, shelf_id], map: "idx_parts_inventory_location")
  @@index([part_code], map: "idx_parts_inventory_part_code")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model parts_outbound {
  id              String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  part_id         String?          @db.Uuid
  quantity        Int
  customer        String?
  order_number    String?
  description     String?
  created_at      DateTime?        @default(now()) @db.Timestamptz(6)
  parts_inventory parts_inventory? @relation(fields: [part_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model purchase_orders {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  supplier_id  String    @db.Uuid
  items        Json
  total_amount Decimal   @db.Decimal
  status       String    @default("confirmed")
  created_at   DateTime? @default(now()) @db.Timestamptz(6)
  description  String?
  suppliers    suppliers @relation(fields: [supplier_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_supplier_confirmed")
}

model purchase_orders_draft {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  supplier_id  String    @db.Uuid
  items        Json
  total_amount Decimal   @db.Decimal
  status       String    @default("draft")
  created_at   DateTime? @default(now()) @db.Timestamptz(6)
  description  String?
  suppliers    suppliers @relation(fields: [supplier_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_supplier")
}

model purchase_orders_confirmed_with_supplier {
  id            String   @id
  supplier_id   String?
  supplier_name String?
  items         Json?
  total_amount  Decimal?
  status        String?
  created_at    DateTime?
  description   String?

  @@map("purchase_orders_confirmed_with_supplier")
}


model racks {
  id              String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  aisle_id        String            @db.Uuid
  name            String            @db.VarChar(100)
  created_at      DateTime?         @default(now()) @db.Timestamp(6)
  parts_inventory parts_inventory[]
  aisles          aisles            @relation(fields: [aisle_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  shelves         shelves[]
}

model sales_orders {
  id                String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  customer_id       String    @db.Uuid
  items             Json
  total_amount      Decimal   @db.Decimal
  payment_reference String?
  created_at        DateTime? @default(now()) @db.Timestamptz(6)
  confirmed_at      DateTime? @default(now()) @db.Timestamptz(6)
  description       String?
  status            String
  customers         customers @relation(fields: [customer_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model sales_orders_draft {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  customer_id  String    @db.Uuid
  items        Json
  total_amount Decimal   @db.Decimal
  status       String    @default("pending")
  created_at   DateTime? @default(now()) @db.Timestamptz(6)
}

model shelves {
  id              String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  rack_id         String            @db.Uuid
  name            String            @db.VarChar(100)
  created_at      DateTime?         @default(now()) @db.Timestamp(6)
  level           Int?
  parts_inventory parts_inventory[]
  racks           racks             @relation(fields: [rack_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model subcategories {
  id              String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  category_id     String            @db.Uuid
  name            String            @db.VarChar(100)
  description     String?
  created_at      DateTime?         @default(now()) @db.Timestamp(6)
  updated_at      DateTime?         @default(now()) @db.Timestamp(6)
  parts_inventory parts_inventory[]
  categories      categories        @relation(fields: [category_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model suppliers {
  name                  String                  @db.VarChar(255)
  supplier_type         String?                 @db.VarChar(50)
  national_id           String?                 @db.VarChar(50)
  tax_code              String?                 @db.VarChar(50)
  phone                 String?                 @db.VarChar(50)
  email                 String?                 @db.VarChar(100)
  address               String?
  website               String?                 @db.VarChar(100)
  bank_account          String?                 @db.VarChar(50)
  credit_limit          Decimal?                @db.Decimal(12, 2)
  payment_terms         String?                 @db.VarChar(50)
  status                Boolean?                @default(true)
  notes                 String?
  created_at            DateTime?               @default(now()) @db.Timestamp(6)
  updated_at            DateTime?               @default(now()) @db.Timestamp(6)
  id                    String                  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  parts_inventory       parts_inventory[]
  purchase_orders       purchase_orders[]
  purchase_orders_draft purchase_orders_draft[]
}

model warehouses {
  id              String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name            String            @db.VarChar(100)
  location        String?
  created_at      DateTime?         @default(now()) @db.Timestamp(6)
  min_stock       Int?              @default(0)
  capacity        Int?
  locations       locations[]
  parts_inventory parts_inventory[]
  zones           zones[]
}

model zones {
  id              String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  warehouse_id    String            @db.Uuid
  name            String            @db.VarChar(100)
  created_at      DateTime?         @default(now()) @db.Timestamp(6)
  aisles          aisles[]
  parts_inventory parts_inventory[]
  warehouses      warehouses        @relation(fields: [warehouse_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}
